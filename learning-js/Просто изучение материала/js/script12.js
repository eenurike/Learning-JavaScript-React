'use strict';

// Передача данных по ссылке и по значению 

let a = 5;
let b = a;

b = b + 5;

console.log(b); // => 10
console.log(a); // => 5
/*
Тут видим что значение в переменной "a" осталось изночальное
*/

let obj = {
    a: 5,
    b: 1
};

let copy = obj;     // ССылка
copy.a = 10;

console.log(copy); // => 10
console.log(obj); // => 10
/*
А тут видим что поменяв значение в обьекте copy, мы меняем
значение и в родительском обьекте
*/

/*
Когда работаем с примитивными типами данных (строки,числа,boolean и т.д.),
то они передаются по значению.
А когда работаем с обьектами, к ним относятся (массивы, функции, обьект дата и т.д.),
передача идет по ссылке, то есть в переменную copy мы не передали какойто 
новый обьект, мы передали просто ссылку на обьект, и когда модифицируем
копию, мы модифицируем и изначальный обьект 
*/


// Копирование обьектов. Способ 1

function copyObj(mainObj) {
    let obj = {};

    for (let key in mainObj) {      // С помощью перебора копировали все свойства
        obj[key] = mainObj[key];
    }

    return obj;
}
/*
создали такую общую функцию для копирования обьектов
*/

let numbers = {
    a: 2,
    b: 5,
    c: {
        x: 7,
        y: 4
    }
};

let newNumbers = copyObj(numbers); 
newNumbers.a = 70;    // Таким образом именно клонировали обьект
console.log(newNumbers);        // => 70
console.log(numbers);       // => 2 Старый обьект не тронут 

newNumbers.c.x = 700;
console.log(numbers);       // => 700
console.log(newNumbers);    // => 700
/*
Когда таким способом клонируем обьекты, есть два важных понятия,
это глубокие и поверхностные копии, когда появляется в одном из 
свойств вложенные структуры такие как (массив и обьект), то
это свойство опять таки будет иметь сылочный тип данных.
Мы будем нормально работать только с поверхностными совйствами
которые лежат в обьекте. Дальше по курсу научимся копировать
и глубокие вложенности 
*/


// Способ 2

let add = {
    d: 17,
    e: 20
};

console.log(Object.assign(numbers, add));
/*
В assign первым аргументом записываем тот обьект в который хотим
все поместить, а вторым аргументом тот обьект который помещаем.
Видим что два обьекта соединились в один, но самое главное что
это не зависимая поверхностная копия, она никак не зависит  
не от numbers, не от add. Только не вложенная глубокая структура
*/

const clone = Object.assign({}, add);
clone.e = 30;

console.log(add);       // => e:20
console.log(clone);     // => e:30
/*
Таким образом создали просто пустой обьект и туда клонировали 
обьект add.
Большую часть времени мы будем работать с обьектами и массивами,
так как в JS почти все состоит из обьектов. И нам нужно
глубокое понимае этих тем!!!
*/


// Копирование массивов. Способ 1

let array = [1,2,3,4,5];

function copyArr(mainArr) {
    let newArr = [];
    for (let i = 0; i < mainArr.length; i++) {
        newArr[i] = mainArr[i];
    }

    return newArr;
}

let array2 = copyArr(array);
array2[0] = 10;
console.log(array);     // => 1
console.log(array2);    // => 10

// Способ 2

let str = ['a','b','c'];
let newStr = str.slice();


newStr[3] = 'Nurike';
console.log(str);
console.log(newStr);


// Новейшие способы ES6. Способ 3

const video = ["youtube", "vimeo", "rutube"],
      blogs = ["wordpress", "livejournal", "blogger"],
      internet = [...video, ...blogs, "vk", "instagram"];

console.log(internet);

/*
Видим что в переменной internet появились значения из video и blogs.
Такой способ называется оператор разворота (spread оператор).
Он как бы разворачивает массив, и выносит каждое значение,
как отдельные элементы через запятую 
*/

// Пимер

function log(a, b, c) {
    console.log(a);
    console.log(b);
    console.log(c);
}

let num = [100, "yo", true];

/*
Допустим нам с сервера прилетели вот такие числа в массиве, 
и нам надо эти три значения передать в функцию log в виде аргументов.
Но как сделать, если функция принемает три отдельных элемента,
она не принемает массив. И тут нам поможет spread оператор
*/

log(...num);

/*
Или как бы это выглядило
log(num[0], num[1], num[2]);
А оператор разворота нам выдал массив в виде
log(100,"yo",true);
*/

/*
И в способе 2 со slice, можно заменить на spread
let str = ['a','b','c'];
let newStr = [...str];
*/


// И точно так же для обьектов. Способ 3

let objOfNum = {
    one: 1,
    two: 2
};

let newObjOfNum = {...objOfNum};
newObjOfNum.two = 22;
console.log(newObjOfNum);   // => 22
console.log(objOfNum);      // => 2

