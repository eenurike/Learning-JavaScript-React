'use strict';

// МАССИВЫ и ПСЕВДОМАССИВЫ

// Методы массива 

let arr = [1, 2, 4, 6, 12];

arr.pop();      // Удаляет последний элемент с массива 
arr.push(7);     // Добавляет вконец элемент

arr.shift();        // Удаляет первый элемент
arr.unshift(1.5);     // Добавляет в начало элемент

/*
Но shift и unshift очень редко используются на практике,
так как удалив или добавив в начало массива элемент, 
то порядковые номера у других элементов поменяются,
и это может привести к ошибкам.
А pop и push они просто удаляют или добавляют в конец
массива элемент, добавляя или удаляя порядковый номер 
этого элемента 
*/


// Перебор массива

// Способ 1, простой цикл 
for (let i = 0; i < arr.length; i++) {
    console.log(arr[i]);
/*
    arr[1], arr[2], arr[3] и т.д.
    Поэтому arr[i]
*/
}
console.log(arr);

//Способ 2, метод перебора массива for of
for (let i of arr) {
    console.log(i);
}
/*
Записали просто i а не arr[i], потомучто i это и есть
сам индекс массива, а не просто цифра от цикла как в способе 1.

Помним предыдущий урок, для перебора обьекта мы используем только for in метод,
а метод for of работает только с массиво подобными сущностями 
(массив, строка, псевдомассив, map, set и какието определенные
    элементы со страницы)
*/

// console.log(arr.length);        // => 5
// arr[20] = "Nurike505";
// console.log(arr.length);        // => 21
// console.log(arr);               
/*
Видим что с 4 порядкового номера до нашего Nurike505,
Все это место занимают пустые ячейки, и каждая такая ячейка имеет
порядковый номер.
Свойство length состоит из последнего элемента в массиве + 1
*/


// Способ 3, метод переборов forEach() используется самое часто в коде 
/*
Этот метод позволяет гибко перебрать элементы в массиве.
Он принемает в себя callback функцию. Метод forEach пробегается
по каждому элементу в массиве, и принемает этот callback для каждого
эелемента
*/
arr.forEach(function(item, i, link){
    console.log(`Индекс ${i} и его значение ${item}, внутри массива ${link}`);
});

/*
Эта callback функция принемает в себя 3 аргумента 
1) Именно тот элемент котрый мы перебираем
2) Порядковый номер эелемента в массиве
3) Это ссылка на тот массив который перебираем
*/


/*
Отличие методов for of и forEach.
В for of работают такие клбчевые слова как continue и break,
а в forEach нет
*/

let bla = [1, 2, 3, 4];
for (let sheet of bla) {
    if (sheet === 2) {
        continue;
    } 
    console.log(sheet);
}


// Методы split join sort
/*
1. От сервера мы получили большую строку где через какой нибудь знак
например "," прописаны товары. И мы бы хотели это превратить в
простой массив, где товары у нас будут лежать по порядку
*/
let str = prompt("Укажите продукты через точку с пробелом");
let products = str.split(". "); 
/*
Обязательно указать через какой разделитель если несколько елементов.
Если записать без разделителя split(), то он запишет большой элемент 
в массив под индексом 0
*/
console.log(products);      // => Видим на осоновании пользователя, сделали массив

/*
2. На основании массива можем сформировать строку
*/
document.write(products.join("; "));    
/*
Склеили наш массив в строку, и он будет отображаться
с разделителем ; и пробелом. Если запсать просто join()
без разделителя, то выведет как есть в массиве, через запятую
*/


/*
3. Сортировка 
*/

let array = ["б", "в", "а", "г"];
array.sort();
console.log(array);     // И получаем буквы в алфавитном порядке, в цифрами так же НО

let num = [1, 3, 2, 20];
num.sort();
console.log(num);       // => 1,2,20,3 не то что мы ожидали
/*
Потому что сорт принемает в виде строки, и види первый символ у 20
двойку, и пишет его как двойку. Массив чисел сформировался
как строки
*/

// Шаблон для сортировки чисел
function compareNumber(a , b) {
    return (a - b);
}
num.sort(compareNumber);
console.log(num);       // Теперь отсортировал правильно
/*
Метод sort внитри себя содержит один из алгоритмов, который
называется алгоритм быстрой сортировки
*/


/*
Псевдомассивы, как фронтендер будешь частенько сталкиватсья с таким понятием.
Когда будем работать с элементами на странице, то мы как раз будем получать
их в виде псевдомассива.
У псевдомассивов нет никаких методов (forEach,filter,push,pop,join и т.д.),
это просто структура которая хранит данные по порядку 
*/


