'use sctrict';

// CALLBACK

function first() {
    setTimeout(function(){
        console.log(1);
    }, 500);                    // Задержка в пол секунды
}
/*
Эта функция будет содержать какойто большой скрипт который
будет выполнятся несколько секунд, или же в эту функцию
будут приходить данные с задержкой.
Чтоб сэмултровать такое поведение добавили setTimeOut
*/

function second() {
    console.log(2);
}
/*
Тут задержки нет
*/

first();
second();

/*
=> 2
=> 1
Видим что вторая функция отработала первой, хотя мы прописали
чтоб первая функция отработала первой. Если функции идут одна за другой
это не значить что они выполняются прямо так же. Потомучто может быть так,
мы передадим в первую функцию какие то данные, и с результатом первой функции 
будет работать функция номер два. Поэтому и нужны callback, чтоб вторая функция 
ждала результата первой функция, чтоб принять ее данные, и работать дальше
с этими данными 
Callback это функция которая должна быть выполнена после того как другая 
функция завершила свое выполнение. Но если мы попробуем прописать callback
с setTimeOut, получим не такой результат который мы ожидаем, так как
setTimeout асинхронная функция, поэтому ее callback выпадает из 
потока кода и после возвращается, но поток не прекращается,
поэтому мы имеем такой результат.
*/

function learnJS(lang, callback) {   // При вызове вторым аргументом мы будем передавать другую функцию
    console.log(`Я учу: ${lang}`);
    callback();
}
/*
Видим что после выполнения первой функции, будет запускаться callback()
который мы передадим вторым аргументом 
*/


// Способ 1
// learnJS("JavaScript", function() {     
//     console.log(`Я учу этот урок!`);
// });

/*
Вторым аргументом и передали callback в виде анонимной функции
которую используем здесь и сейчас, потом она исчезает.
Видим что вторая не заработает пока не отработает первая функция
*/


//Способ 2
function done() {
    console.log("Я учу этот урок!");
}

learnJS("JavaScript", done);
/*
И обрати внимание когда передаем функцию done в аргумент, мы не вызываем ее
потомучто этот done пойдет в аргумнент callback в первой функции, 
и в первой функции она и вызывается callback()!!!
*/
