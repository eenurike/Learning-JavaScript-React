// Одно из важнейших понятий в программированиии в целом это Уловия
// Пример из реальности: если в холодильнике пусто, то вы останитесь голодными. То есть, есть условие "если холодильник пустой" и есть последствие "мы голодные", или вы подходите к дороге, и если на светофоре зеленый, то вы переходите, если красный, то ждете когда загорится зеленый. Так же работает все и в коде, пока пользователь не авторирзован на сайте, ему не показывается блок верстки с каким то персональным предложением, не доступны какието функции

if (4 === 9) {   // В скобках это условие которое мы хотим проверить, и оно должно быть преобразовано к булиновому типу(true/false)
  // Что будет происходить если условие верно
  console.log('Ok!');
}
// Ничего не получаем, все правильно так как у нас условие не правильно

if (4 === 4) {
  console.log('Ok!');
}
// Ok!, получаем результат Ok! так как у нас условие дествительно выполнилось. По простому если 4 равно 4 то в консоль выводим сообщение

if (4 === 9) {
  console.log('Ok!');
} else {
  // Действие которое будет выполнятся в случае не верного условия
  console.log('Error!');
}
// Получили Error, так как условие у нас не верно

// Это конечно до банального простой пример, но он показывает как работают условие в js

if (4) {  // Или 1, или любое число кроме 0. Это по логике все будет true
  console.log('Ok!');
} else {
  console.log('Error!');
}
// Ok!

if (456) {
  console.log('Ok!');
} else {
  console.log('Error!');
}
// Ok!

if (0) {
  console.log('Ok!');
} else {
  console.log('Error!');
}
// Error!
// Потомучто мы можем взять содержимое какого-то элемента на странице, какого-то блока и поместить прям сюда в условие, если это содержимое будет присутствовать, то оно преобразуется в true и выполнится первая часть кода, а если содержимого этого не будет, то в логическом контексте будет у нас преобразовываться в false потомучто ничего не передано в условие, и у нас будет выполняться вторая часть 

const num = 50;

if (num < 49 ) {
  console.log('Error');
  // Условие не верное, 50 не меньше чем 49, значит программа идет дальше
} else if (num > 100) {
  console.log('Too much');
  // Условие не верно, 50 не больше чем 100, и программа идет дальше
} else {
  console.log('Ok!');
  // И если не одно из уловий не верно, программа пришла сюда
}
// Заметь что наши условия разветвлились, и такие разветвление много делать много. Но давай будем реалистами, на самом деле когда их очень много это не совсем удобно использовать, для того чтобы избежать таких больших ветвлений, у нас есть специальная конструкция switch, это такая модификация if которая поддерживает сразу несколько проверок и условий

const num2 = 20;

switch(num2) {
// В условие помещаем обьект того что мы будем сравнивать и что проверять
  case 19: 
  // Тут указываем то значение что мы хотим проверить, и здесь есть очень важный момент, конструкция switch всегда идет на строгое сранение(===) в отличие от обычных условий, то есть switch не сравнивает > < , только сравнивает ===
    console.log('Неверно!'); 
    break;
    // Всегда после условия нужно писать break, это обязательная синтаксическая конструкция, она работает так, если num2 = 19, то у нас выполнится case 19; и код пойдет дальше, и на break остановится и не пойдет дальше, если break не было бы, код пошел бы дальше все case прогонять что мы прописали
  case 30:
    console.log('Неверно!');
    break;
  case 22:
    console.log('Верно!');
    break;      
  default:
    // Если не один из case не сработал, такое может произойти  
    console.log('Не в этот раз(');
    break;
}

const num3 = '90';

switch (num3) {
  case 'lol':
    console.log('Неа');
    break;
  case '20':
    console.log('Nope');
    break;
  case 90:
    console.log('Почти, но это тип данных');
    break;
  case '90':
    console.log('В точку');
    break; 
  default:
    console.log('Хз что произошло');
    break;  
}
// Строки тоже сравнивает на строгое сравнение
// Сейчас такую конструкция прямо очень часто встречать не будете, но ближе к концу курса, некоторые продвинутые библиотеки без нее не обходятся, например тот же Redux

// Есть еще и другой синтаксис при помощи тернарного оператора
const num4 = 30;
(num4 === 30) ? console.log('Ok!') : console.log('Error!'); // Ok!
(num4 > 60) ? console.log('Ok!') : console.log('Error!'); // Error!
// И заметь что использовали два оператора это ? и : , такая запись позволяет нам экономить место и обьем кода. Он называется тернарным оператором потомучто в его работе участвует аж 3 аргумента, это единственным тернарный оператор на данный момент который есть в JS
// 1. (num > 60)
// 2. console.log('Ok!')
// 3. console.log('Error!');

// Так же есть бинарный оператор, в его работе участвует 2 аргумента
console.log(4 + 4);
// + это бинарный оператор, потомучто он складывает два аргумента
console.log(+'4');
// тут + это унарный плюс, так как он использует всего один аргумент для работы, то есть он меняет тип данных string на number


