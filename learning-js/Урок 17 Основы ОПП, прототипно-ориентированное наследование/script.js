'use strict';

// Основы ООП(обьекто ориентированное программирование), и один из стилей прототипно-ориентированное наследование
// Давольно давно программы состояли просто из набора функций, которые вызывали друг друга в нужный момент, здесь довольно много недостатков, и программисты всегда старались усовершенствовать свои техники, так появились: функциональный подход, обьекто ориентированный подход, процедурный и многие другие. JS является обькто ориентированным языком, и главнуб роль в нем играет обьект, он может в себе содержать и методы, свойства, любой тип данных и предстовлять собой целостную структуру, такую некую боевую яденицу. Представим какую ниюудь сущность из реальной жизни, чтоб лучше понимать ООП, например легковой автомобиль, у него есть такие свойства как: двигатель, кузов, колеса и т.д, у него есть такие методы как езда, перевозка грузов и людей и у всех легковых автомобилей так. Смысл ООП в том что мы представляем любую вещь как обьект с набором свойств и методов, точно так же можем представить микроволновку, холодильник и что угодно. 
// Если мы работаем со строкой, у нее есть такое свойство как длина строки и методы для изменения ее региста и т.д, и казалось бы что это целый обьект. Но мы не зря учили типы данных, и когда строка написана просто
'This the text';
// Это обыный примитив, простой тип данных, но как только мы пытаемся вызвать какоето свойство или метод
'This the text'.toUpperCase();
// То JS оборачивает эту строку в обьект и после модификации, возвращает строку на место
let str = 'some';
let strObj = new String(str);
// Таким образом мы можем создать новуб строку, но таким синтаксисом никто не пользуется, но пока мы им воспользуемся
console.log(typeof(str)); // string
console.log(typeof(strObj));  // object, вот примерно так происходит когда мы в JS пытаемся использовать какой-то метод на строке, то есть он оборачивает строку в какой-то обьект, потом использует какой-то метод, который есть у этого обьекта, а потом возвращает все обратно. То есть let str = 'some'; это был примитивный тип данных, а потом new String(str); в работе он превратился в обьект, после этого опять вернулся в примитив. Нужно понять этот механизм, может показаться зачем это нужно знать. В будущем для написания каких-то сложных скриптов, использования библиотек и фреймварков, нам все равно придется с этим работать