/* Задания на урок:

1) Удалить все рекламные блоки со страницы (правая часть сайта)

2) Изменить жанр фильма, поменять "комедия" на "драма"

3) Изменить задний фон постера с фильмом на изображение "bg.jpg". Оно лежит в папке img.
Реализовать только при помощи JS

4) Список фильмов на странице сформировать на основании данных из этого JS файла.
Отсортировать их по алфавиту 

5) Добавить нумерацию выведенных фильмов */

'use strict';

const movieDB = {
    movies: [
        "Логан",
        "Лига справедливости",
        "Ла-ла лэнд",
        "Одержимость",
        "Скотт Пилигрим против..."
    ]
};

let advertisement = document.querySelectorAll('.promo__adv img'),
    poster = document.querySelector('.promo__bg'),
    genre = poster.querySelector('.promo__genre'),
    movieList = document.querySelector('.promo__interactive-list');

// 1)
advertisement.forEach(item => {
    item.remove();
});
/*
С обычной функцией, это анонимная функция которая создается
здесь и сейчас

advertisement.forEach(function (item){
    item.remove();
});
*/

// 2)
genre.textContent = "Драма";

// 3)
poster.style.backgroundImage = "url('img/bg.jpg')";
/*
Путь к картинки прописываем относительно HTML,
потомучто JS работает от HTML файла. И обращай
внимание чтоб ковычки не повторялись
*/

// 4) 
/*
Сперва нужно удалить список который на странице, так как у нас
есть массив
*/
movieList.innerHTML = "";
/*
Если записать в innerHTML ничего, то этот блок очиститься,
как бы логично ведь правда)
Но зачем сортировать список на странице, когда можно сразу готовый
список в массиве и отсортировать
*/

movieDB.movies.sort();
console.log(movieDB);

// 4) Теперь нужно сформировать верстку с помощью JS и поместить на станицу
/*
Перебираем наш массив данных, и на основании его данных, выводить фильмы
на страницу.
Конечно могли бы вручную создавать элемент, добавляем ей класс, потом 
добавляем внутренность на основании нашего массива и уже потом помещаем 
на страницу, но это не самый оптимизированный способ (но он тоже рабочий).
Самый оптимизированный способ помещать такие элементы и генерировать
их вручную - это прописывать их строками и просто добавлять еще каждый раз
строку когда у нас повторяется цикл (понимаю звучит не понятно, но на
примере это будет проще понять) 
*/

console.log(poster.innerHTML);
/*
ПРОСТО ДЛЯ ПРИМЕРА, таким образом видим структуру нашей
переменной poster который наш задний фон. 
По факту это все большая строка, из структуры верстки 
*/

movieDB.movies.forEach(function (item,i) { 
/*
И формируем точно такую же структуру как в HTML у promo__interactive-list
*/
// 5) где i+1
    movieList.innerHTML += `    
        <li class="promo__interactive-item">${i+1}: ${item}     
            <div class="delete"></div>
        </li>
    `;
/*
С каждым циклом будет добавляться такая структура.
А если бы написали просто = а не +=, то с каждым циклом
у нас бы менялась одна строка, а не добавлялась новая!!!
innerHTML может добавлять HTML структуру!
И если в наш массив фильмов добавить новый фильм, он
автоматически сгенерируется на странице.

Эту записать можно понять вот так
    a = a + 2
типа мы к "a" добавили 2 и поместили в "a"
    a += 2
это сокращенный вариант. Просто добавляем еще что-то.
Так же это работает со строками 
    nur += "ike"
Еще пример
    let a = 0;
    for (let i = 0; i <= 3; i++) {
    a += i;
    console.log(a);
}    
будет 6
*/
});




