'use strict';

// Функции это наши действия в JS, они используют различные типы данных и изменяют информацию так как мы ей укажем, так же это значительно сокращает наш код прямо как циклы. Можно функцию представить как калькулятор, нам нет нужды каждый раз вводить какие-то математические вычисления, мы просто вводим числа и калькулятор делает все за нас, сама эта структура это просто набор функций сложение/вычитание/деление/умнодение, если открыть инженерный калькулятор, то там намного больше будет функций. Тоже самое можно сказать про микровалновку, холодильник у всех них есть какие-то функции, которые они выполняют

function showFirstMessage() {
  // Имя функции может быть любым, но только осмысленным, имя должно быть глаголом с припиской того над чем выполняется действие. В круглые скобки будем передавать аргументы функции
  console.log('Hello World!');
}
// Сейчас функция просто существует в коде, она никак не выполняется, она просто есть, для того чтобы она заработала, ее нужно вызвать
showFirstMessage(); // Hello World!

// Есть и функции анонимные, то есть без имени. Они вызываются и используются здесь и сейчас только один раз, поэтому впринципе им имя давать и не нужно. Анонимные функции разберем дальше

// У функции есть так же и аргументы, которые записываем в круглые скобки. Когда функция вызывается, мы можем ей дать какие-то данные которые она будет использовать внутри себя. Опять напримере калькулятора, мы как функцию передаем два аргумента, нажимаем 4, затем +, затем 6 и нажимаем =, и калькулятор показывает результат 10. Это мы передали два аргумента 4 и 6 в функцию сложения

function showFirstMessage2(text) {
  console.log(text);
}

showFirstMessage2('Hello World!');
// Когда функция запустится, она возмет эту строку Hello World! которую мы ей передали, подставит ее вместо аргумента функции, и потом засунет в console.log

// Если давать в детали, то аргументов на самом деле может быть бесконечное кол-во showFirstMessage(text, arg, num, и т.д.). Чуть позже познакомимся с одной фишкой нового стандарта, для того чтобы быстро указать что этих аргументов у нас может быть много, но на баззовом уровне такой REST оператор пока не нужен