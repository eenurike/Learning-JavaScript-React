Хойстинг - это всплытие переменных
  console.log(name);
  var name = 'Nurike'
Получили результат undefined, получили какой-то результат, хотя это не правильное поведение, по идеи мы должны получить ошибку
  let name = 'Nurike'
  console.log(name);
Тут переменная создается только после ее обьявления  

И всегда лучше создать новую переменную чем перезаписывать много раз одну и туже 

На данный момент существует 8 типов данных. И эти типы данных можем разделить на две категории
1) Простые типы (Примитивы)
   Числа 1,2,3
   Строки 'string'
   Логичкский тип данных true/fasle
   null (когда чего-то просто не существует)
   undefined (когда существует но значения нет), например стоит холодильник, но он пустой
   Symbol 
   BigInt тип данных который отображает большие числа, в JS есть небольшое ограничение при работе с большими числами, мы не можем задать число которое будет больше чем 2 в 53 степени, на практике бывают ситуации когда нам необходимо работать с большими числами
2) Комплексные (Обьекты)
   Массивы []
   Функции function
   Обьекты Даты
   Регулярные выражения
   Ошибки

const person = {
  ключ: значения      Ключ-свойство обьекта: значение этого свойства
  name: 'John',       Тип данных string
  age: 25,            Тип данных number
  isMarried: false,   Тип данных boolean
  sayHello: function() {}
    И function это действия этого персонажа, то есть метод этого обьекта
};

console.log(person.name);     John, то есть через точку мы обратились к значению свойства name
console.log(person[age]);     Ошибка, так как мы используем какуюто перемеенную age которой не существует
console.log(person["age"]);   25, такой способ тоже работает, но JsHint говорит что лучше писать через точку   

const object = {
  'Anna': 500,
  Alice: 800
};
Тут есть четкое соотношение, у нас есть какйто сотрудник и его ЗП, то есть идет пара ключ значение. В массив так записать не получится, мы потеряем смысл, не очень будет понятно что к чему относится. Обрати внимание что свойства в обьектах это строки и мы их можем записывать в двух форматах, можно прописывать в ковычках тогда сразу будет понятно что это строка, можно и записывать и без ковычек, обьект сам поймет что это строка

И почему же массивы это частный случай обьектов
const array2 = ['a', 'b', 'c'];
const arrayObj = {
  0: 'a',
  1: 'b',
  2: 'c',
  'a': 'ale'
};
Если посмотреть вглубь массивов, то это те же обьекты, просто у них ключ это всегда ключ номер по порядку
  console.log(arrayObj.0); Получаем ошибку, так как такой синтаксис не очень понятен для JS, мы используем цифру после точки это не совсем правильно
console.log(arrayObj.a);  ale, другое дело когда мы обращаемся к строке а не к числу. Это просто пример, никто в реальной жизни не называет цифрами свойства, но когда-то можно попасть на такой момент, и выход из ситуации есть
console.log(arrayObj['0']);   a, такой способ позволяет избегать ошибок. Поэтому если вдруг будут не предвиденные обстоятельства с обьектами, то всегда надежнее использовать квадратные скобки, они работают нормально и с цифрами которые могут попасть в обьект, или если попадется кирилица или вообще какойто другой язык, и в таких ситуациях будет надежным использовать квадратные скобки

const b = 'Hello';
arrayObj[b] = 'World';  Именно так обратились к [переменной]

console.log(arrayObj); 
const arrayObj = {
  0: 'a',
  1: 'b',
  2: 'c',
  'a': 'ale',
  Hello: 'World'
};
Видим что мы через переменную добавили новое значение и его свойство