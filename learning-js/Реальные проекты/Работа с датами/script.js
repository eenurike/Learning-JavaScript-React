'use strict';

// Работа с датами
/*
По факту дата - это такой спецефический обьект, который в себе содержит 
различные методы и свойства. Работа с датами является обязательным навыком.
Даты можно использовать измерения времени работы какойто функци, если мы
хотим засечь как быстро она работает и мравнить например с другой функцией,
так же можно использовать для вывода текущей даты(таймер или какие то часы на странице)
и так же можно использовать для хранения времени создания, или изменения какого-то
документа
*/

let now = new Date(); // создаем новую дату и помещаем в переменную 
// new - создаем конструктор
console.log(now);
/*
=> 2021-05-04T11:04:04.871Z
показывает текущую дату вплоть до миллисекунд, Т это разделитель 
*/

now = new Date('2021-05-04');
/*
=> 2021-05-04T00:00:00.000Z
В виде аргумента можем передать строку, и данные из input type=date
*/
console.log(now);
/*
Вывел только дату, а часы,минуты,секунды показал как 00:00:00,
так как их не указали, таким образом можем четко
настраивать дату передавая определенные параметра
*/

now = new Date(2021, 5, 1, 17);
console.log(now);
/*
=> 2021-06-01T11:00:00.000Z
так же можно дату передать в виде number, почему июнь а не как мы
указали май, дело в том что когда number то отсчет идет с 0 а не с 1,
и часы указали 17, а вывел 11, дело в том что Date учитывает часовой пояс.
Время указывается по Гринвичу, разница в Кз -6 часов
*/

now = new Date(0);
console.log(now);
/*
=> 1970-01-01T00:00:00.000Z
так же время можно указывать в миллисекундах, отчет начинается с 1970 года.
В JS очень удобно работать именно в миллисекундах. Все даты которые создаем
они конвертируются в миллисекунды которые отстают от 1970-01-01, так что
любую дату можно конвертировать в миллисекунды, а миллисекунды в дату
*/
console.log(Date.parse(new Date()));
console.log(Date.parse(new Date('1990-05-05')));
console.log(new Date(641865600000));
/*
=> 1620129339546
=> моя днюха в миллисекундах и наоборот
Так мы вывели текущую дату в миллисекундах
*/
now = new Date(1620129339546);
console.log(now);
/*
=> 2021-05-04T11:55:39.546Z
Тукущая дата, конвертировали мс в дату
*/
now = new Date("1990");
console.log(now.getTime());
/*
=> 631152000000 
1990 год в миллисекундах, чуть ниже обьясняется метод getTime()
*/
now = new Date(631152000000);
console.log(now);
/*
=> 1990
Конвертировали мс в дату
*/


// Методы даты 
// 1) Методы getеры, получаем какие то значения 
let now2 = new Date();
console.log(now2.getFullYear());
/*
=> 2021
Показал текущий год
И помни что год в атрибут Date, передаем именно четырехзначными(2021),
а не 21
*/

console.log(now2.getMonth());
/*
=> 4
Текущий месяц, в програмировании май это 4 месяц, так как отсчет идет с 0
*/
console.log(now2.getDate());
/*
=> 4 число
Дни исчисляются от 1 до 31
*/
console.log(now2.getHours());   // 17 часов
console.log(now2.getMinutes()); // 40 минут
console.log(now2.getSeconds()); // 54 секунды
console.log(now2.getMilliseconds()); // 957 мс

console.log(now2.getDay());
/*
=> 2 то есть вторник
Показывает день недели, причем воскресенье показывает как 0,
суббота 6, а понедельник 1
*/

console.log(now2.getUTCHours());
/*
=> 11 часов по Гринвичу
Эти все методы показывают местное время!!! И иногда
может понадобится другой часовой пояс UTC
*/

console.log(now2.getTimezoneOffset());
/*
=> -360 тоесть -6 часов 
Выводит разницу между часовым поясом(местное время) и
UTC(время по Гринвичу)
*/

console.log(now2.getTime());
/*
=> 1620129339546
Столько времени в миллисекундах прошло с 1970 года
*/

// 2) Даты seteры, устанавливаем даты
/*
Все тоже самое что и с get, только get меняем на set
*/
let now3 = new Date();
console.log(now3.setHours(18));     // => 1620217685690
console.log(new Date(1620217685690));   // => 2021-05-05T12:28:05.690Z
/*
Устанавили часы на 18 часов, но вывелось 12 часов по UTC,
дело в том что в терминале никаких часовых поясов не устаноалены,
если выведем это значение в браузере, то выведет локальное время
*/
console.log(now3.setHours(40));     // => 1620297408621
console.log(new Date(1620297408621));   // => 2021-05-06T10:36:48.621Z
/*
Если установим не коректное время, то он сам исправить, остаток
времени перенесет на будущее
*/

// Даты можем использовать для измерения каких то промежутков времени
let start = new Date();

for (let i = 0; i < 100000; i++) {
    let some = i ** 3;
    /*
    Возвели i в 3 степень
    */
    console.log(some);
}

let end = new Date();

console.log(`Цикл отработал за ${end - start} миллисекунд`);
/*
Цикл отработал за 13 миллисекунд, такие операции назваются banchmark
(когда мы смотрим на производительность нашей системы,функции,цикла и т.д.)
обычно они выглядят сложнее, но база выглядит примерно так, берем первую
дату когда началось и последнюю дату, и вычесляем их разницу
*/




