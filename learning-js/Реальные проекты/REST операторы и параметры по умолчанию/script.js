'use strict';

// REST оператор  

/* С оператором разворота или SPREAD оператор, REST это его брат,
который использует такой же синтаксис, но уже в других условиях.
Если SPREAD брал сущность и раскладывал его на отдельные элементы,
то REST занимается обратным, он отдельные элементы обьеденяет в массив */

const log = function(a, b, ...rest) {
    /* И вот допустимчто эта функция принимает обязательно аргументы (a,b), а
    вот дальше мы незнаем сколько аргументов будет, может 10, может 1, может не одного.
    Допустим хотим добавить не сколько классов в элемент, и знаем что точно будет
    class="item", а какие дополнительные классы по мере разработки будут, не знаем,
    они могут быть, а могут и не быть, но самое главное они придут в аргументы функции.
    Этот оператор записывается всегда вконце и называться может как угодно */
    console.log(a, b, rest);
    /* REST оператор собирает все оставшееся что поподет в него, и он 
    формирует из этого массив */
};

log('basic', 'rest', 'operator', 'usage');
/* Два аргумента у нас приходят точно basic и rest, а 
остальные как опциональные могут прийти , а могут нет
=> basic rest [ 'operator', 'usage' ] */


// Параметры по умолчанию

/* Иногда мы хотим чтоб в нащих фунциях параметры которые мы передаем поумолчанию
имели какие то значения */

function calcOrDouble(number, basis = 2) {
    /* Старый метод */

    // basis = basis || 2;

    /* Помним что оператор ИЛИ запинается на правду,
    а если вторым аргументом ничего не прийдет, а пустота это вседа false,
    и в аргумент подставится 2 по умолчанию */
    console.log(number * basis);
}
calcOrDouble(4, 5); // => 20
calcOrDouble(4);    // => 8
/* Но чтоб будет если не задать второй аргумент, будет ощибка */