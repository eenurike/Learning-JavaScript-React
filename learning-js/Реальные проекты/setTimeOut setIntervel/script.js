'use strict';

// setTimeOut setInterval

/*
Управление временем выполения скриптов. 
Очень часты наши функции выполняются не сразу,
а через какой то промежуток времени, или они могут 
повторятся с определенным промежутком времени, и нужно
уметь работать вот с таким ассинхронным кодом 
*/

let timerId = setTimeout(function() {
    console.log('Hello');
}, 2000);
/*
Эта функция сработать через 2 секунды, время определяется
в миллисекундах. Первым аргументом что будет функция делать,
вторым через сколько она вызовится  
*/

let timerId2 = setTimeout(function(text) {
    console.log(text);
}, 3000, 'Hello Nurike');
/*
И в саму функцию можем передать аргумент, и вызвать третьим 
аргументом у setTimeOut
*/

let timerId3 = setTimeout(logger, 4000);

function logger() {
    console.log('some text');
}
/*
Ну и в первый аргумент можем передавать ссылку на
вызов функции 
*/

setTimeout(logger, 5000);
/*
Ну и можно вызвать setTimeOut непомещая ее в переменную,
но лучше так не делать, потому что мы должны конкретно знать
в какую переменную помещен какой либо setTimeOut, чтоб не запутаться
потому что таких ассинхроных таймеров может быть много, и определять
их нам нужно, чтоб в будущем как то их останавливать  
*/

clearInterval(timerId2);
/*
Сбросили второй таймер, например поситителем воволить, каждые
30 сек. модальное окно с какойто акцией на товар, и пока посетитель
не перейдет к этому товару постаянно выводить это модальное окно,
а как перешел к товару, сбрасываем таймер
*/

let btn = document.querySelector('.btn');

// btn.addEventListener('click', () => {
//     const timer = setInterval(logger, 2000);
// });

/*
Каждые 2 сек вызывается функция, и вспоминаем область видимости,
если мы вне обработчика события вызовим clearInterval(timer), то то
он просто не увидит переменную timer
*/

// let timer;

// btn.addEventListener('click', () => {
//     timer = setInterval(logger2, 1000);
// });

// clearInterval(timer);

// function logger2() {
//     console.log('Hello Nurike');
// }
/*
Вывели переменную timer в глобальную переменную, и теперь 
clearInterval видит, его еще наш clearInterval работать
не будет, так как потомучто он идет в потоке синхронного кода.
Потомучто только полсе клика запустится интервал, дальше идет
clearInterval, который просто не сработает, потомучто он будет
работать с undefined, в clearInterval еще ничего нет 
*/

let timer;
let i = 0;

btn.addEventListener('click', () => {
    timer = setInterval(logger2, 1000);
});



function logger2() {
    if (i === 3) {      // На 4 итерации счетчика таймер сбросится 
        clearInterval(timer);
    }
    console.log('Hello Nurike');
    i++;        // Будем следить сколько раз уже повторился setInterval
}