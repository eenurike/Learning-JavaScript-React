/*
Тут поговорим о браузере, какие глобальные сущности в нем есть,
и как с ним работать. С document мы уже знакомы, по сути
document это обьект который содержит всю HTML структуру.
window это окно в котором показывается документ, например 
если будем изменять размера окна, у нас меняется именно window
а не document
screen это факту это весь видимый монитор, у каждого пользователя, 
свой screen так как у всех разные мониторы и мобилы, на практике 
крайне редко используется 
*/

console.dir(document);
console.dir(window);
console.dir(screen);

/*
Видим все методы и свойства этих элементов. Эти три сущности глобальные,
теперь поговорим о более конктреных элементов.
Если нужно получить ширину и высоту элемента включая padding но без margin,
border и прокрутки, то можно использовать clientHeigth clientWidth 
*/

const box = document.querySelector('.box'),
      btn = document.querySelector('button');

const width = box.clientWidth,
      height = box.clientHeight;

console.log(width, height);
/*
=> 383 333
А у нас ширина прописана в 400px, а результат 383.
Нужно еще учитывать box-sizing: border-box;
Если нужно получить ширину и высоту со всеми величинами
*/

const width2 = box.offsetWidth,
      height2 = box.offsetHeight;

console.log(width2, height2);      
/*
=> 400 350
Но мы получили наш елемент обрезанный, так как мы
установили значение overflow: scroll; не видимая часть не учитывается
Чтоб узнать высоту и ширину всего элемента вместе с невидимой частью 
*/

const width3 = box.scrollWidth,
      height3 = box.scrollHeight;

console.log(width3, height3);

/*
=> 383 1352
ширина учитывается без место где скрол, иногда
на сайтах можно встретить модальные окна с большой не видимой часть
ширины и высоты
*/


// btn.addEventListener('click', () => {
//     box.style.height = box.scrollHeight + "px";
// });

/*
При клике будем раскрывать окна на всю высоту конента, помним 
что scrollHeight выводит всю высоту элемента. 
Самое часто используемое свойство scrollTop, показывает сколько 
мы про скролили
*/

btn.addEventListener('click', () => {
    console.log(box.scrollTop);
    
});


/*
И стоить отметить что мы расматриваем примеры по отношению
к элементам, пока не берем ни document ни window
*/

// Метод для получения координат

console.log(box.getBoundingClientRect());

/*
Стоит заметить, что в JS позиционирование работает не как в CSS.
Например right расчитывается от левой стороны до правой границы элемента,
со всеми велечинами так же  
*/

console.log(box.getBoundingClientRect().top);

/*
=> 50
Получили конкретно конкретно координаты верха
*/

/*
Например ситуация такая пишим скрипт, а нам важно знать,
показывается ли элемент на странице, то есть у этого элемента
сейчас какой display
*/

const style = window.getComputedStyle(box);
console.log(style);

/*
Это те стили которые приминились к элементу и эти стили мы менять не можем, 
например узнать какой display и на основании этого чтото делать.
B и видим большой список свойств именно стилей
*/

console.log(style.display);

/*
=> block
При помощи этого метода можем получить стили псевдоэлементов
:before :after и т.д. Работать с псевдоэлементами в JS мы неможем
это прописано в стандарте, но работать со стилями псевдоэлентами
мы можем 
const style = window.getComputedStyle(box, ':after');
*/

// Метрики для document и window
/*
Хочеться например написать 
*/
console.log(document.scrollTop);
/*
=> undefined 
Так как у document такого свойства нет.
Чтоб использовать все свойства выше для document 
*/

console.log(document.documentElement.clientWidth);
console.log(document.documentElement.scrollTop);
/*
=> 1536 
Ширина документа
=> 0
Так как у нас overflow scroll, и нет прокрутки документа, 
документ стоит на самом верху.
Для эксперемента можно, зайти на любой сайт пролистать вниз,
открыть панель разработчика и консоли вписать
document.documentElement.scrollTop
он покажет сколько мы отскролили, а если вписать
document.documentElement.scrollTop = 0
то документ встанет в самое начало, таким образом можно делать
стрелочки внизу сайта, при клике чтоб возвращается в начало сайта
*/

// Два спецефичиских метода, но тоже не редко используются
/*
Так же для проверки, на любом сайте скролим куда угодно.
ОТкрываем панель разработчика, заходим в консоль и пишем
window.scrollBy(0, 500)
первый аргумент по X, если есть горизонтальный скрол
он отскролит от текущей позиции на 500 px
window.scrollBy(0, -200)
отскролит от текущей позиции назад на 200 px

window.scrollTo(0, 0)
отскролит от текущей позиции в начало
window.scrollTo(0, 1500)
отскролит от текущей позиции на скрол в 1500 px
Перемещение по определенным координатам на странице
*/
