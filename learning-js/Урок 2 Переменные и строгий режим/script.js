"use strict";
// Строгий формат, мы говорим что мы работаем в современном режиме, в котором не работают некоторые не точности которые были в старых стандартах JS

// a = 15;
// console.log(a);
// Вот такая конструкция без дерективы use strict сработала бы, тоесть мы вообще никакой переменной не обьявили, а код сработал и не выдал ошибку


// В мире програмиранния все состоит из информаций, все теги на странице, какие то файлы, даже действия пользователя - это все информация, и нам будет необходимо ее куда то помещать. Для этих целей у нас существует переменные, это такие хранилища информации, просто представь много подписанных коробочек в которых чтото лежит 

let number = 1;
let NUmber = 1;
// Это разные переменные
const leftBorderWith = 10;
// Переменные нужно называть осмысленно

number = 15;
console.log(number);
// 15 Такую переменную мы можем перезаписать, а const мы не можем перезаписать, const с определенным значением может быть только один. Хорошим тоном является использование const везде где это возможно (в течении курсы поймешь почему, особонно во второй части). Но у const есть особенность, так таковых констант в JS не существует 

const obj = {
  a: 50
};

obj.a = 60;
console.log(obj);
// Тут никакой ошибки нет, хотя мы обратились через const

// УСТАРЕВШИЙ ФОРМАТ ЗАПИСИ 

console.log(name);
var name = 'Nurike';
// НЕ ИСПОЛЬЗУЙ VAR НИКОГДА!!! Проблема var в том что, она существует еще до того как она была обьявлена, тут мы получили результат undefined(неопределенный), то есть мы получили не ошибку, а какое-то значение, и это неправильное поведение с точки зрения логики. Такое поведение называется hoisting или всплытие переменных, на таком маленьком примере вреда особо не видно, но когда пишишь большой проект, hoisting может сыграть злую шутку

// console.log(name2);
// let name2 = 'Nurike';
// ОШИБКА, это логичное поведение, так как переменная существует только после того как она была обьявлена

// Еще let и const видны только между фигурными скобками

{
  let result = 50;
}
console.log(result);
// ОШИБКА переменная result просто не видна, ее не существует

{
  let result = 50;
  console.log(result);
}
// 50

{
  var result = 70;
}
console.log(result);
// 70 ошибки нет

// НАПИСАНИЕ НАЗВАНИЙ ПЕРЕМЕННЫХ

const a = 5000;
const b = 4000;

console.log('Ширина кузова автомобиля: ' + a + ', длина: ' + b);
// Например у нас будет большой проект и кода тоже будет много, и когда мы захотим получить какой нибудь результат из этих переменных, мы не поймем за что эти переменные отвечают

const width = 5000;
const length = 4000;

console.log(`Ширина кузова автомобиля: ${width}, длина ${length}`);
// Так сразу понятно за что эти переменные отвечают, но можно улучшить еще больше. Просто такие переменные length и width, это обобщенные названия, нет конкретики, таких переменных может быть куча

const vehicleBodyWidth = 5000;
const vehicleBodyLength = 4000;

console.log(`Ширина кузова автомобиля: ${vehicleBodyWidth}, длина ${vehicleBodyLength}`);
// Вот так еще более понятно за что эти переменные отвечают

['sfsdf', 'ergwef', 'qwrewf'].map(a => {
// В таком случае можно без конкретики называть переменные, так как такие переменные нессут в себе более функциональное значение. Или назвать item или i и т.д.
});

// Request обращаемся к серверу сайта, и сервер нам дает ответ в виде данных, и на момент их получения нам не важно как они называются и чаще всего они будут называться date, response и т.д. И часто нам не важно что там находится либо мы просто не знаем что нам вернет сервер, именно поэтому мы как то обстрактно называем переменные

// И нужно придерживаться одного стиля написания переменных
// const carBodyWidth = 5000;
// const vehicleBodyLength = 4000;
// Так не красиво и в дальнейшем можно запуться 

// СТИЛИ НАПИСАНИЯ
// camelCase папки, файлы и переменные
// snake_case так называть только папки и файлы, НЕ ПЕРЕМЕННЫЕ
// Kebab-case называть только папки и файлы
// PascalCase так будем называть классы в JS, первая буква должна быть всегда заглавная 
// UPPER_SNAKE_CASE так обозначаются переменные которые хочешь видеть в виде константы, то есть их никогда нельзя переопределять const COLOR_RED = '#F00';
const _apiBase = 'http://gateway.marvel.com'; // То есть РУКАМИ НЕ ТРОГАТЬ!!!

// И всегда лучше создать новую переменную чем перезаписывать много раз одну и туже                                                                                                

