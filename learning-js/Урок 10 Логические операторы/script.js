// К логическим операторам относится логическое ИЛИ И и оператор отрицания НЕ, нужно понять что все операторы нам что-то возвращают, то есть дают какой-то результат. Представим реальную ситуацию, вы хотите купить автомобиль, но денег только на покупку одной машины, вы приходите в салоны и сталкивайтесь с выбором, есть модель А и есть модель Б, так как денег на обе машины вам не хватит, то вы выбираете или вариант А или вариант Б, но как результат у вас будет новая машина, вы все равно ее купите. Тоже самое можно применить и к оператору И, вам понравились обе машины и денег вам хватает на все, как результат вы подучили обе машины. И когда будем говорить про возвращаемое значение и как раз подразумевается какойто результат, ведь мы любые операторы применяем с какйо-то целью, увеличить число на 5, разделить число на 10 и получить какой-то результат

// Логический оператор И(&&), и оно возвращает правду, если все аргументы верны
// Например ты голоден и хочешь купить картошку фри и гамбургер, если оба блюда есть в наличии И гамбургер И фри, то вы вополните свою задачу, вы будете сыты
let hamburger = true,
      fries = true;

if (hamburger && fries) {
  console.log('Я сыт!');
}      
// Я сыт!, Наше условие выполнилось так как оба условия выполнились. Тоесть при помощи логического оператора И, мы проверяем два сразу условия. Как итог заметь (hamburger && fries) тут мы получили полностью правдивый результат, то есть это условие нам вернуло правду, и поэтому выполнилось действие Я сыт!
console.log((hamburger && fries)); // true, Это все выражение которое было в скобках и он вернул просто логический тип данных true
// Запомни что результат логических операций это какой-то логическое булевое значение

hamburger = true;
fries = false;

if (hamburger && fries) {
  console.log('Я сыт!');
} 
// в консоле ничего не вывелось, потомучто условие не выполнилось, а у нас нет блока else и код просто идет дальше. Получается так что вы сможете сьесть только одно блюдо, но вместе с картошкой не сможете этого сделать, и условие которое мы проверяем нам вернуло false

console.log((hamburger && fries)); // false

// Это такое базовое применение, когда мы четко видим что обо аргумента которые здесь испольщуются они как бы сразу в логическом типе true/false, но так бывает далеко не всегда 

hamburger = 5; // Гамбургеров осталось 5
fries = 0; // Картошка фри вся закончилась

if (hamburger && fries) {
  console.log('Я сыт!');
} 
// Так же условие не выполнилось, так как 0 это всегда false, а любые числа это true, тут мы подходим к такой теме как динамическая типизация, по этой теме будет отдельный большой урок, но пока нужно понять что в JS типы данных могут переходить один в другой, строка может стать числом, число может стать строкой и что угодно может стать логическим значением
// Пример из реальной практики, например хочешь посмотреть какой-то фильм на пиратском сайте, и там обычно нужно посмотреть несколько реклам, то есть мы модем сделать условие видео не разблокируется до тех пор, пока пользователь не досмотрел рекламу 1 и рекламу 2, и опять буддет использоваться этот оператор И в условие
// В JS есть 5 сущностей которые будут всегда false 0, ''(' ' это не false, так как это не пустая строка, там есть пробел), null, undefined, NaN. А все остальное всегда будет true

// Усложним задачу, допустим что мы пришли в заведение с 2-мя друзьями, и каждый из нас хочет сьесть по гамбургеру и только я хочу еще картошку, если чего-то не будет, то мы идем в другое заведение
hamburger = 2;
fries = 1;

if (hamburger === 3 && fries) {
  // могли бы написать fries === 1, но зачем, ведь только мне нужна картошка, и так будет true, так что зачем захломлять код
  // И здесь мы видим комбинацию сразу нескольких операторов, логический оператор который сравнивает две сущности, и оператор сравнения. Если вдруг не знаешь какой оператор выполнится первым, то в таком случае нужно обратиться к таблице операторов https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence эта таблица говорит нам в каком порядке у вас будут выполнятся операторы, точно так же как и в обычной математике когда умножение выполняется первее чем сложение. Логическое И слабее чем Строгое равенство. Так что в нашем случае условие в hamburger вернется false так как(потому мы всегда получаем какой-то результат, мы сравниваем и получаем либо true либо false), у них всего два гамбургера осталось, а нам нужно три. И одно из условий уже false, а логическому И нужно чтоб два условия были правдивыми, так что Мы уходим
  console.log('Мы сыты');
} else {
  console.log('Мы уходим');
}

hamburger = 3;
fries = 1;
let cola = 0;
// Наш друг захотел колу

if (hamburger === 3 && cola === 1 && fries) {
  console.log('Мы сыты');
} else {
  console.log('Мы уходим');
}
// Сначала выполняется hamburger, потом cola, а только потом логические оператор И(&&) начинает свою работу, но оператор && наталкивается на первый false так как cola нету а 0 это false, и оператор && прекращает свою работу и дальше вычисления идти уже не будут
console.log(hamburger === 3 && cola === 1 && fries); // false, оператор && наткнулся на false и вывел его

// Расмотрим один из сложных моментов в логических оператарах

hamburger = 3;
fries = 1;
cola = 0;

console.log(hamburger === 3 && cola && fries); // 0
// Когда мы запускали это все с логическими значениями(cola === 1), то мы в консоле и получали true/false, но теперь у нас есть честкие значения. В нашем примере мы получили не false, а 0, какое-то значение, логические операторы что-то возвращают какой-то результат, и когда они работают с данными которые не true/false, они будут возвращать сами значения с которыми они работают, и значит наш оператор И(&&) возвращает первое ложное значение на который он наткнулся, поэтому мы получили значение 0(cola=0). А если бы все условия были бы правдивыми, то оператор И(&&) выполнил свою работу до конца и вывел бы последнее правдивое значение то-есть 1(fries=1)

console.log(1 && 0);  // 0
console.log(1 && 5);  // 5
console.log(null && 6);  // null
console.log(undefined && 'fbisdf');  // undefined

// Отсюда вытекают два правила
// 1. Оператор И(&&) всегда возвращает первое ложное значение если оно есть, на нем он запинается и его возвращает и дальше код уже не идет
// 2. Если все аргументы верны, код дошел до конца, то возвращает значение последнего аргумента

// Логический оператор ИЛИ(||), принцип работы похож, но здесь мы проверяем на хотябы одно верное значение ИЛИ то ИЛИ то ИЛИ это
// Например вы встречаетесь с друзьями чтоб просто поболтать, а еда отходит второй план, вам нужно хотя бы хоть что-то лежало на столе ИЛИ гамбургеры ИЛИ картошка ИЛИ кола
hamburger = 3;
fries = 0;
cola = null;

if (fries || hamburger || cola) {
  console.log('Мы сидим');
} else {
  console.log('Мы уходим');
}
// Мы сидим, Когда опепратор ИЛИ(||) находит правду он перестает работать и возвращает ту правду на которой он остановился. ИЛИ запинается на правде

console.log(fries || hamburger || cola); // 3
console.log(fries || hamburger === 4 || cola); // null, Но когда все не правда, оператор ИЛИ(||) возвращает последнее ложное значение
