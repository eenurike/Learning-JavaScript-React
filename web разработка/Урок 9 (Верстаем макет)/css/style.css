* {
    /* Устанавливаем стандартный шаблон для всех элементов */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Прописываем стили для первого section promo */
.promo {
    /* Ширину не прописываем в 1920 потому что, мы просто оставляем ее на воле,
    ведь наш сайт будет подстраиваться под различные размеры экрана, а вот
    высоту установим */
    /* height: 800px; */
    /* Высота бдует строиться по контенту */
    background: url("../img/bg/main_bg.jpg") center center/cover no-repeat;
    /* Сперва нужно выйти из папки!!!
    почему выйти, потому что мы сейчас находимся в style.css, и нужно выйти
    из папки css. Потом можно прям в свойстве background все и прописать
    1) адресс картинки 
    2) позиционирование 
    3) размер
       cover - растягиваем картинку если вдруг она не помещается
       в тот блок где она лежит
    4) не повторялась   
    Поставили слэш(/) без него наша картинка не работает, именно / между
    позиционированием и размером */
}

/* Заметем, что весь контент в макете расположен в контенере, как бы
от контента отступы по бокам, место нечем не занято, разве что фоном,
делается это для того чтобы самы маленькие стандартные мониторы,
отображади правильно наш сайт. Видим в макете что ширина этого контенера
1140px, таким образом человек с монитором 1200px зайдет на этот сайт, у него все будет хорошо отображаться*/

.container {
    width: 1140px;
    margin: 0 auto;
    /* Таким образом блочные элементы ставим по центру */
    padding: 39px 0 62px 0;
    /* Но видим что логотип прижат к верхней границы документа,
    но задать внутрение отступы лучше у родителя сверху и снизу где срелочка */
}

.logo .logo_img {
    /* Так мы прописали наследование, сделали специфичный селектор.
    Нам нужно ценрировать логотип */
    margin: 0 auto;
    /* Ничего не произойдет, так как такой способ работает только с
    блочными элементами, а img у нас строчно блочный элемент */
    display: block;
    /* Если не можешь центрировать элемент, посмотри его блочную модель,
    и если что поменяй его display */
}

.logo .logo_text {
    /* Просто скопировали стили с макета figma */
    color: #fff;
    font-family: Roboto;
    font-style: normal;
    font-weight: 500;
    font-size: 15px;
    /* line-height: 24px; */
    /* Это свойство отвечает за межстрочный интервал,
    высота строки на которой написан этот текст равен 24px,
    но с этим свойством нужно быть осторожным, его лучше 
    использовать если несколько строк текста,
    когда копируешь текст с макета с avacode figma там
    всегда будет у текстов присутствовать это свойство, так как
    когда создается дизайн он сам ставит эти значения */
    text-transform: uppercase;
    text-align: center;
    margin-top: 14px;
}

.title {
    color: #F9BF3B;
    font-family: Roboto;
    font-style: normal;
    font-weight: 900;
    font-size: 41px;
    /* line-height: 41px; */
    text-transform: uppercase;
    text-align: center;
}

h1 {
    margin-top: 53px;
}

h2.title {
    /* Прописали такой специфичный селектор так как, у нас два h2, 
    а отступ нужен только одному, и к title обратиться не можем, 
    так как их тоже два, поэтому сразу без пробела пишем h2.title,
    так как это класс этого же эелемента!!! */
    margin-top: 30px;
}

.simple .title_big {
    color: #fff;
    font-family: Roboto;
    font-style: normal;
    font-weight: 900;
    font-size: 80px;
    /* line-height: 80px; */
    text-transform: uppercase;
    text-align: center;
    margin-top: 21px;
}

.promo .promo_text {
    color: #FFFFFF;
    font-family: "Roboto Light";
    line-height: 28px;
    /* Межстрочный интервал теперь нам нужен, так как у нас
    несколько строк текста. Проще говоря высота строки */
    font-size: 21px;
    font-weight: 300;
    text-align: center;
    padding: 0 13px;
    /* Чтоб было как в макете, когда подключим шрифты все встанет на место */
    margin-top: 23px;
}

.promo .promo_text span {
    font-family: Roboto;
    text-transform: uppercase;
    color: #F9BF3B;
    font-weight: 700;
}

/* Ну и правило для того чтоб было удобнее верстать, не нужно
margin делать в разброс, у одного блока сверху, и другого снизу,
а у этого и сверху и снизу, лучше как то шаблонизировать. 
Например у всех блоков только margin-top или margin-botom.
Так же и с margin-left и margin-right */

.promo .promo_btn, .gift .gift_btn{
    /* Тут уже нас интересует ширина и высота, это уже такой более
    оформленный блок */
    /* width: 313px;
    height: 72px; */
    padding: 23px;

    box-shadow: inset 0 0 0 rgba(0, 0, 0, 0.18);
    /* insert это тень падает во внутрь, потом смещение тени по оси X,
    потом смещение по оси Y, затем размытие нашей тени(чем больше значение,
    тем больше размытие), затем цвет(0.18 это прозрачность) */
    border: 4px solid rgba(0, 0, 0, 0.23);
    background-image: linear-gradient(to top, #2798b9 0%, #3ab6da 100%);
    /* Вместо картинки можно установить градиент */
    /* И нужно кнопку поставить в центр, но тег button строчно блочный элемент */
    display: block;
    /* margin-top: 73px; */
    /* Если запишем отступ среху перед нашим центрированием, то ничего не произойдет
    так как margin 0 auto перепишет значение margin top */
    margin: 0 auto;
    margin-top: 73px;

    font-family: "Roboto Condensed";
    font-weight: 400;
    font-size: 21px;
    color: #FFFFFF;
    text-transform: uppercase;
    cursor: pointer;
    /* При наведении появлется обводка кнопки чтоб этого не было */
    outline: none;
}

.gift .gift_btn {
    margin-top: 43px;
}

.more {
    margin-top: 73px;
}

.more .more_text {
    font-family: "Roboto - Thin";
    font-weight: 200;
    font-size: 15px;
    color: #FFFFFF;
    text-transform: uppercase;
    text-align: center;
}

.more .more_img {
    display: block;
    margin: 0 auto;
    margin-top: 13px;
}


/* Наш второй блок */

.waiting {
    background-color: #EFEFEF;
    /* height: 604px; */
    padding: 85px 0 75px 0;
}

.waiting .waiting_header, .finish .finish_header{
    font-family: Roboto;
    font-size: 30px;
    font-weight: 400;
    text-align: center;
    color: #252525;
}

.finish .finish_header {
    color: white;
}

.waiting .waiting_divider, .finish .finish_divider{
    width: 217px;
    height: 4px;
    background-color: #f9bf3b;
    margin: 0 auto;
    margin-top: 18px;
}

.waiting .waiting_subheader {
    font-family: Roboto;
    font-size: 23px;
    font-weight: 400;
    text-align: center;
    color: #4a4a4a;
    margin-top: 17px;
}

.waiting .waiting_wrapper {
    margin-top: 45px;
}

.waiting .waiting_wrapper .waiting_item {
    width: 339px;
    /* А вот высоту задавать не будет, всегда нужно
    думать "а если", а если текст будет меняться,
    а мы задали фиксированную высоту, не указав высоту
    высота блока будет автоматически подстраиваться под
    контент внутри */
    text-align: center;

    display: inline-block;
    vertical-align: top;
    /* Потом изучим более новый подход как flex-box */
    margin-right: 48px;
    /* Последний блок сьехал, так как от всех трех блоков
   есть отступ справа, и у последнего блока тоже есть отступ,
   а у нас ведь ширина ограничена, и третьему блоку просто не хватило
   пространство и он сьехал вниз, эту проблему можно решить псевдоселекторами,
   но это дальше */
    margin: 0 15px;
    /* Пока просто примерно задали каждому длоку отступ справа и слева */
}

/* Но нужно себя обезопасить, так как картинки могут быть разного размера,
и верстка вся сьедет */

.waiting .waiting_wrapper .waiting_item .waiting_img {
    /* Чуть позже не будем писать такие большие конструкции */
    width: 100%;
    /* И картинки будут в 100% от родителя, а у родителя waiting_item
    ширина 339px, но ведь высота не поменялась, а если мы пропишем
    и нужную высоту, картинка может сплющится или стать больше,
    то есть она потеряет свои пропорции, и так она будет выглядить
    еще хуже */
}

.waiting .waiting_wrapper .waiting_item .waiting_descr {
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    color: #4a4a4a;
    margin-top: 33px;
}

/* Применим flex box на блок */

.waiting .waiting_wrapper {
    margin-top: 45px;
    display: flex;
    /* Устанавливаем родителю flex */
    justify-content: space-between;
}

/* И уберем display inline-blok и vertical-align:top и margin
На практике конечно я бы удалил эти строчки кода,
но тут я перезаписываю так как у меня записанны
поясняющие комментарии */

.waiting .waiting_wrapper .waiting_item {
    width: 339px;
    text-align: center;
    display: block;
    vertical-align: unset;
    margin-right: 48px;
    margin: 0 0;
}


/* Но проблема в том что у корпоротивных сайтов, контент может
меняться, добавляться и т.д. Например в блоки с карточками добавили 
текст, но так как у нас фиксированная высота, текст вышел за пределы,
и мы установили минимальную высота, то есть, минимальная высота 604px,
но если контента или что то еще что застовляет на блок быть больше,
тем самым у нас уже высота будет больше чем 604, тогда наш главный
блок будет растягиваться. Запомни продумывать такие мелочи, то что
контент(картинки, текст) могут меняться, и чтоб не возникало таких проблем
в некоторых случаях лучше устанавливать минимальную высоту, и вообще
очень мало элементов которые требуют фиксированную жосткую высоту */
.waiting {
    min-height: 604px;
}

/* Верстаем 3 блок */

.optimization {
    position: relative;
    min-height: 550px;
    padding: 102px 0 107px 0;
}

.optimization .container {
    padding: 0;
}

.optimization .optimization_header {
    /* Но видим  что текст не так как на макете, но это 
    из за не правильного шрифта, шрифт дальше по курсу,
    но можно было просто text-align: right */
    margin-left: 391px;
    font-family: Roboto;
    font-size: 29px;
    font-weight: 400;
    text-transform: uppercase;
    color: #299cbd;
}

.optimization .optimization_text {
    margin-left: 391px;
    margin-top: 25px;
    font-family: Roboto;
    font-size: 17px;
    line-height: 27px;
    font-weight: 300;
    color: #4a4a4a;
    line-height: 25px;
}

.optimization .optimization_text span {
    font-weight: 700;
}

.optimization .optimization_img{
    position: absolute;
    bottom: 0;
    left: -70px;
    z-index: -1;
}

.finish {
    min-height: 447px;
    padding: 86px 0 79px 0;
    background: url("../img/bg/second_bg.jpg") center center/cover no-repeat;
}

.finish .finish_flex-wrapper {
    margin-top: 41px;
    justify-content: space-between;
    display: flex;
}

.finish .finish_flex-wrapper .fishi_flex-item {
    width: 206px;
    text-align: center;
}

.finish .finish_flex-wrapper .fishi_flex-item .finish_img {
    width: 115px;
    height: 115px;
    background-color: #b4e2ff;
    border-radius: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 auto;
}

.finish .finish_flex-wrapper .fishi_flex-item .finish_descr{
    font-family: Roboto;
    font-size: 17px;
    font-weight: 300;
    color: #efefef;
    margin-top: 26px;
}

.gift {
    background-color: #efefef;
    min-height: 628px;
    padding: 83px 0;
}

.gift .gift_image {
    display: flex;
    justify-content: center;
}

.gift .gift_descr {
    font-family: Roboto;
    font-size: 30px;
    /* line-height: 43px; */
    font-weight: 400;
    color: #252525;
    margin-top: 24px;
    text-align: center;
}

.vebinar {
    min-height: 515px;
    padding: 89px 0 64px 0;
}

.vebinar .container{
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0;
}

p:nth-of-type(1) {
    font-family: Roboto;
    font-size: 30px;
    font-weight: 400;
    text-transform: uppercase;
    color: #252525;
    margin-top: 37px;
}

p:nth-of-type(2) {
    font-family: Roboto;
    font-size: 36px;
    font-weight: 900;
    text-transform: uppercase;
    color: #299cbd;
    margin-top: 30px;
} 

p:nth-of-type(3) {
    font-family: Roboto;
    font-size: 23px;
    font-weight: 400;
    color: #4a4a4a;
    margin-top: 25px;
}

.footer {
    background-color: #1a1a1a;
}

.footer .container{
    padding: 61px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    
}


.footer .footer_link span {
    margin: 0 5px;
}

.footer a:link, .footer .container p {
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    color: #888888;
}

.footer .container p{
    margin-top: 10px;
}