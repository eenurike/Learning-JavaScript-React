h2 {
    color: brown;
    font-size: 30px;
}

div a {
    text-decoration: none;
    font-size: 20px;
    font-weight: bold;
    color: lightgreen;
}

.chapter {
    color: green;
}

#begin {
    color: orange;
}

#begin {
    color: orange;
    color: #556B2F;
    color: rgb(0, 0, 129);
    color: rgba(255, 20, 147, 0.5);
    font-weight: bold;
    text-transform: uppercase;
}

h2 {
    text-align: center;
    font-style: italic;
    text-decoration: underline;
    text-decoration: line-through;
    font-size: 30px;
}

.text {
    font-weight: bold;
    color: white;
    background-color: black;
    padding: 2px 4px;
    border-radius: 7px;
}

.box {
    width: 300px;
    height: 300px;
    background-color: rgb(26, 182, 182);
    padding: 20px;
    padding-top: 20px;
    padding-right: 10px;
    padding-bottom: 15px;
    padding-left: 25px;
    padding: 20px 10px 15px 25px;
    border-width: 3px;
    border-style: solid;
    border-color: grey;
    border: 3px solid black;
    margin: 20px;
}

.box {
    box-sizing: border-box;
}

* {
    box-sizing: border-box;
}

a {
    border: 1px solid black;
    padding: 20px;
    margin: 20px;
    width: 500px;
}

a {
    display: block;
}

.box {
    display: inline-block;
}

img {
    display: block;
    width: 700px;
    margin: 0 auto;
    float: left;
}


img {
    float: right;
}


img {
    float: none;
}

.box {
    display: inline-block;
    vertical-align: top;

}

.red {
    height: 300px;
}


nav {
    position: static;
    position: relative;
    position: absolute;
    right: 20px;
    top: 30px;

}

.example {
    background-color: rgb(182, 182, 182);
    position: relative;
    height: 300px;

}


.example2 {
    position: relative;
}


.red {
    background-color: red;
    display: inline-block;
}

/* С одной единицой измерения мы уже знакомы px, но сейчас капнем поглубже.
Единицы измерения можно разделить на две большие группы
1) Относительные единицы - зависят от какого то другого параметра
(em, ex, px, %) */

.red {
    width: 40%;
    /* Откуда он же взял эти 40%, дело в том что эта величина она относительная
    она зависит от того, какая ширина и высота у родителя этого элемента.
    И родитель этого красного блока example2, и этот родитель занимает всю ширину
    страницы, и он установил 40% относительно examle2, если бы у example2 была
    меньше ширина, то и соответственно 40% у red был бы меньше */
    height: 50%;
    /* У видим что красный блок теперь занимает 50% высоты родительского блока */
}

/* Но с % нужно быть осторожным */

.example2 {
    height: 50%;
    /* Ничего не произошло, так как у example2 родитель body, а у body
    так таковой фиксированой высоты нет. Поэтому при использовании %, следи
    чтоб у родителя была фиксированая высота и ширина от того что утанавливаете */
}

/* em и ex, они зависят от величины шрифта, em зависит от текущего элемента
(то есть какой font size установлен там), а ex зависит от размера буквы Х */

.red {
    height: unset;
    font-size: 30px;
    /* Видим что шрифт увеличился, но ширина осталось такой же */
    width: 40%;
    /* И теперь вместо того чтоб использовать %, используем em */
    width: 40em;
    /* Это как раз величина которая зависит от шрифта у данного элемента.
    Видим что блок ушел вниз, он просто не помещается в одну строку,
    и ширина значительно увеличилась, и у этого блока ширина 1200px,
    это получилось 30 * 40 (размер шрифта * 40 едениц), в реальной
    практике это почти не используется, по банальной причине, это не удобно,
    как минимум потому что в разных блоках может быть разная величина.
    ex расматривать не будем, так как там совсем спецефичная величина 
    и она никогда не используется */
}

/* 2) бсолютные единицы - они четко заданы in(дюйм), cm(см), mm(мм), pt(пункт) и 
pc(пика используется в типографии), в вебе эти велечины не применяются 
Новые относительные величины rem, vh, vw */

.red {
    
    width: 35rem;
    /* Красный квадрат вернулся на круги своя, теперь он занимает намного
    меньше месмте чем в предыдущем варианте, потому что величина rem зависит
    от шрифта только корневого элемента(html), а не самого элемента где прописан
    шрифт */
    font-size: unset;
}

/* html {
    font-size: 30px;
    И видим что у всего документа увеличился шрифт на 30px, но самое главное
    ширина красного блока снова увеличилась, так как rem зависит от размера шрифта
    корневого элемента html. Она как бы взяла размер шрифта корневого элемента 
    и увеличила его в 35 раз. В реальной практики это тоже давольно редко используется
    но эта величина уже дает простор для фантазий, но с помощью rem можно делать
    удабную адаптивку, установливая шрифт для каждого блока в rem, и меняя значение
    только у шрифта в html, шрифт в документе будет пропорционально увеличиваться
    или уменьшаться
} */

/* Куда интереснее две величины которые зависят от ширины и высоты нашего экрана
vw(ширина) и vh(высота) диапазон 1/100 */

.red {
    width: 40vw;
    /* Видим что красный блок стал шире, потомучто он зависит от ширины экрана
    если будем уменьшать экран документа по ширине, и этот квадрат будет уменьшаться */
    height: 50vh;
    /* Если закрыть консоль разработчика, то высота квадрата увеличится, так как
    увеличилась высота экрана, и если будем увеличивать консоль разработчика, тем
    самым уменьшая высоту экрана страницы, то и наш квадрат тоже будет уменьшаться.
    И вот эти величины используются куда чаще, они конкурируют с %, но % могут
    не сработать, если у родителя нет фиксированой ширины и высоты, а vw vh работают всегда */
}

/* Еще есть доп. ед. измерения это vmin vmax, с ними познакомимся чуть позже */